(defpackage :pg
  (:use cl)
  (:use cl+ssl)
  (:use postmodern)
  (:use quri)
  (:export :pgresponse)
  )
(in-package :pg)

(setq *make-ssl-client-stream-verify-default* nil)
(defvar *DATABASE_URL* (uri (asdf::getenv "DATABASE_URL")))
(defvar *DATABASE_HOST* (uri-host *DATABASE_URL*))
(defvar *DATABASE_NAME* (subseq (uri-path *DATABASE_URL*) 1))
(defvar *DATABASE_PORT* (uri-port *DATABASE_URL*))
(defvar *DATABASE_USER* (car(asdf::split-string (uri-userinfo *DATABASE_URL*) :max 2 :separator ":")))
(defvar *DATABASE_PASSWORD* (car (last (asdf::split-string (uri-userinfo *DATABASE_URL*) :max 2 :separator ":"))))

(defun pgresponse()
  (let ((now (get-internal-real-time)) (text "") )
    (with-connection `(,*DATABASE_NAME* ,*DATABASE_USER* ,*DATABASE_PASSWORD* ,*DATABASE_HOST*  ,:port ,*DATABASE_PORT* ,:use-ssl ,:yes))
    (setq text (write-to-string (- (get-internal-real-time) now)))
    `(200 (:content-type "text/html") (,text))
    )
  )

