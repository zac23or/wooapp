#+TITLE: Dynamic Query Notes
#+OPTIONS: num:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+OPTIONS: ^:nil
* Overview
The question often gets asked how to build dynamic or composable queries
in postmodern. First we need to remember that the query macro assumes that
everything that is not a list starting with a keyword will evaluate to a
string.

There are generally two approaches to building dynamic or composible queries,
either use sql-compile or use :raw. In either case you will need to ensure
that either you have control over the inputs or they still result in
parameterized queries. If not you have opened yourself up to an sql injection
attack.

* Approach #1 Use sql-compile
Sql-compile does a run-time compilation of an s-sql expression. In the
following example, we create a function that accepts a where-clause,
a table-name, 3 columns to select and two parameters to go into the where
clause.
#+BEGIN_SRC lisp
(defun toy-example (where-clause table-name col1 col2 col3 arg1 arg2)
  (with-test-connection
   (query (sql-compile
           (append `(:select ,col1 ,col2 ,col3 :from ,table-name :where)
                   where-clause))
          arg1 arg2)))

(toy-example '((:and (:= 'city '$1) (:> 'salary '$2))) 'employee 'id 'name 'city "Toronto" 45000)

((6 "James" "Toronto") (9 "Mary" "Toronto"))

#+END_SRC
If we just look at what this call to sql-compile in toy-example generates, it would look like:
#+BEGIN_SRC lisp
"(SELECT id, name, city FROM employee WHERE ((city = $1) and (salary > $2)))"
#+END_SRC
This example is still a parameterized query but for security reasons you will
need to be very careful how you generate the where clause.

Another example with sql-compile and append, in this case updating a table and
setting two columns to NULL.
#+BEGIN_SRC lisp
(sql-compile (append '(:update :table1 :set)
                     (loop for a in '("col1" "col2")
                           collect a
                           collect :NULL)))

"UPDATE table1 SET E'col1' = NULL, E'col2' = NULL"
#+END_SRC

Lets think about it differently. What if we know the universe of columns we
want to select, but want to conditionally select some of them. Suppose we
know our targetted table has columns:

'id 'name 'salary 'start-date 'city 'region 'age.

We may decide we always want name, city and age, but salary and start-date are
conditional.

#+BEGIN_SRC lisp
(defun toy-example-2 (salaryp start-date-p)
  (sql-compile
   (remove nil `(:select 'name 'city 'age
                         ,(if salaryp 'salary nil)
                         ,(if start-date-p 'start-date nil)
                         :from 'employee))))

(query (toy-example-2 t t))

(("Jason" "New York" 29 40420 #<SIMPLE-DATE:DATE 01-02-1994>)
 ("Robert" "Vancouver" 21 14420 #<SIMPLE-DATE:DATE 02-01-1995>)
 ("Celia" "Toronto" 24 24020 #<SIMPLE-DATE:DATE 03-12-1996>)
 ("Linda" "New York" 28 40620 #<SIMPLE-DATE:DATE 04-11-1997>)
 ("David" "Vancouver" 31 80026 #<SIMPLE-DATE:DATE 05-10-1998>)
 ("James" "Toronto" 26 70060 #<SIMPLE-DATE:DATE 06-09-1999>)
 ("Alison" "New York" 38 90620 #<SIMPLE-DATE:DATE 07-08-2000>)
 ("Chris" "Vancouver" 22 26020 #<SIMPLE-DATE:DATE 08-07-2001>)
 ("Mary" "Toronto" 34 60020 #<SIMPLE-DATE:DATE 08-06-2002>))

(query (toy-example-2 t nil))

(("Jason" "New York" 29 40420) ("Robert" "Vancouver" 21 14420)
 ("Celia" "Toronto" 24 24020) ("Linda" "New York" 28 40620)
 ("David" "Vancouver" 31 80026) ("James" "Toronto" 26 70060)
 ("Alison" "New York" 38 90620) ("Chris" "Vancouver" 22 26020)
 ("Mary" "Toronto" 34 60020))

#+END_SRC
You could skip the (remove nil... portion and substitute t for nil. E.g.
#+BEGIN_SRC lisp
(defun toy-example-2 (salaryp start-date-p)
  (sql-compile
   `(:select 'name 'city 'age
             ,(if salaryp 'salary t)
             ,(if start-date-p 'start-date t)
             :from 'employee)))
#+END_SRC
But I prefer to remove those segments completely from the query.

Following on this same thread of thought, you can define a portion of the
sql in a let clause:
#+BEGIN_SRC lisp
(let ((sql1 '(:= name "Jason")))
  (query (sql-compile
    `(:select 'name 'city 'age :from 'employee :where ,sql1))))

(("Jason" "New York" 29))
#+END_SRC

* Approach #2 Use :raw
To quote Marijn, the :raw keyword takes a string and inserts it straight
into the query. I try to stay away from :raw if possible, but sometimes...

#+BEGIN_SRC lisp
(query (:select (:raw "tmp1.name") :from (:as 'baz (:raw "tmp1"))))
#+END_SRC
